using OpenTK;
using System;
using System.IO.Ports;

using OpenTK;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;
using OpenTK.Input;
using System.Drawing;
using System.Drawing.Imaging;

namespace openGL_Visualaser
{


    public class CircularBuffer
    {
        float[] _buffer;
        int _head;
        int _tail;
        int _length;
        int _bufferSize;
        Object _lock = new object();
        public bool IsEmpty
        {
            get { return _length == 0; }
        }


        private int NextPosition(int position)
        {
            return (position + 1) % _bufferSize;
        }
        public void Enqueue(float toAdd)
        {
            lock (_lock)
            {
                _head = NextPosition(_head);
                _buffer[_head] = toAdd;
                if (IsFull)
                    _tail = NextPosition(_tail);
                else
                    _length++;
            }
        }

        public float Median()
        {
            float median = 0;
            lock (_lock)
            {
                foreach (float d in _buffer) median += d;
                median /= _length;
            }
            return median;
        }

        public bool IsFull
        {
            get { return _length == _bufferSize; }
        }
        public CircularBuffer(int bufferSize)
        {
            _buffer = new float[bufferSize];
            _bufferSize = bufferSize;
            _head = bufferSize - 1;
        }
    }


    class Program
    {
        const int CB_L = 7;

        static void data(object sender, SerialDataReceivedEventArgs e)
        {

            while (srp.ReadByte() != 0xFF) if (srp.BytesToRead <= 0) return;
            while (srp.ReadByte() != 0x00) if (srp.BytesToRead <= 0) return;
            while (srp.BytesToRead < 12) ;

            byte[] arr = new byte[12];
            srp.Read(arr, 0, 12);
            short[] data = new short[6];
            for (int i = 0; i < 6; i++)
            {
                data[i] = (short)((arr[i * 2] << 8) & 0xff00 | (arr[i * 2 + 1]));
            }

            float ax, ay, az, gx, gy, gz;

            ax = data[0] / 16200f;
            ay = data[1] / 16200f;
            az = data[2] / 16200f;
            gx = data[3] * toRadSec + 0.300f;
            gy = data[4] * toRadSec + 0.234f;
            gz = data[5] * toRadSec + 0.2515f;

            if (Math.Abs(gx) < 0.09f) gx = 0;
            if (Math.Abs(gy) < 0.09f) gy = 0;
            if (Math.Abs(gz) < 0.09f) gz = 0;

            axb.Enqueue(ax);
            ayb.Enqueue(ay);
            azb.Enqueue(az);
            gxb.Enqueue(gx);
            gyb.Enqueue(gy);
            gzb.Enqueue(gz);
        }

        static SerialPort srp;

        static CircularBuffer axb = new CircularBuffer(CB_L), ayb = new CircularBuffer(CB_L), azb = new CircularBuffer(CB_L), gxb = new CircularBuffer(CB_L), gyb = new CircularBuffer(CB_L), gzb = new CircularBuffer(CB_L);

        static float SX, SY;
        static bool isFrst = true;

        const float arm_len = 0.28571428571f;
        const float toRadSec = 0.00106422515365f;

        [STAThread]
        static void Main(string[] args)
        {

            while (true)
            {
                Console.WriteLine("Выберете порт из списка: ");
                string[] ports = SerialPort.GetPortNames();
                if (ports.Length == 1) try
                    {
                        srp = new SerialPort(ports[0], 2000000);
                        srp.Open();
                        srp.DataReceived += data;
                        break;
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Ошибка подключения: " + e.Message);
                    }

                foreach (string s in ports) Console.WriteLine(s);
                Console.WriteLine("Напишите refresh для обновления списка");
                string port = Console.ReadLine();
                if (port != "refresh")
                {
                    try
                    {
                        srp = new SerialPort(port, 2000000);
                        srp.Open();
                        srp.DataReceived += data;
                        break;
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Ошибка подключения: " + e.Message);
                    }
                }
                Console.WriteLine();
            }
            Console.WriteLine("Успешно подключен");

            float t = 0;
            Vector3 me = new Vector3(0, 0.7f, 0);
            Vector3 up = Vector3.UnitY;
            Vector3 at = new Vector3(0, 0, 5f);

            const float dt = 1f / 60f;

            float a_gx = 0, a_ax = 0, a_gz = 0;

            int prevx = 100, prevy = 100;
            Bitmap img = new Bitmap(100, 100);
            for (int x = 0; x < 100; x++)
                for (int y = 0; y < 100; y++)
                    img.SetPixel(x, y, Color.White);

            using (var game = new GameWindow())
            {
                game.Load += (sender, e) =>
                {
                    // setup settings, load textures, sounds
                    game.VSync = VSyncMode.On;
                };

                game.Resize += (sender, e) =>
                {
                    GL.Viewport(0, 0, game.Width, game.Height);
                };

                game.RenderFrame += (sender, e) =>
                {
                    Console.SetCursorPosition(0, 0);


                    float ax = axb.Median(), ay = ayb.Median(), az = azb.Median(), gx = gxb.Median(), gy = gyb.Median(), gz = gzb.Median();


                    if (ax > 1f) ax = 1f;
                    else if (ax < -1f) ax = -1f;
                    if (ay > 1f) ay = 1f;
                    else if (ay < -1f) ay = -1f;
                    if (az > 1f) az = 1f;
                    else if (az < -1f) az = -1f;


                    /* a_ax = (float)(Math.Acos(ay));

                     a_gx += gx * dt;

                     a_gx = a_gx * 0.9f + a_ax * 0.1f;


                     a_gz += gz * dt;

                     a_gz = a_gz * 0.9f + a_ax * 0.1f;

                     Console.WriteLine("{0:f3}*PI\t{0:f3}*PI                ", a_gx / Math.PI, a_gz / Math.PI);*/

                    Console.WriteLine("{0:f3}\t{1:f3}\t{2:f3}\t{3:f3}\t{4:f3}\t{5:f3}              ", ax, ay, az, gx, gy, gz);

                    float alpha = (float)(Math.Acos(ay));

                    //float alpha = (a_gx + a_gz) / 2;

                    // float ang = (float)Math.Atan(Math.Round(az / ax, 4));
                    //if (ax < 0) ang += (float)Math.PI;


                     float ang1 = (float)Math.Atan(Math.Round(az / ax, 4));
                    if (ax < 0) ang1 += (float)Math.PI;


                    float l1 = arm_len / ay * (float)Math.Sin(alpha);

                    float l2 = l1 - (float)Math.Sin(alpha);
                    // float N = (float)Math.Sqrt(ax * ax + az * az);



                    int px = (int)(50 + l1 * 50 );
                    int pz = (int)(50 + l1 * 50 );


                    // int px = (int)(50 + l1 * 50*Math.Cos(ang));
                    // int pz = (int)(50 + l1 *50*Math.Sin(ang));

                    if (px > 98) px = 98;
                    else if (px < 1) px = 1;
                    if (pz > 98) pz = 98;
                    else if (pz < 1) pz = 1;

                    img.SetPixel(px, pz, Color.Black);



                    /*img.SetPixel(px + 1, pz, Color.Black);
                    img.SetPixel(px - 1, pz, Color.Black);
                    img.SetPixel(px, pz + 1, Color.Black);                    
                    img.SetPixel(px, pz - 1, Color.Black);*/

                    Console.WriteLine("{0:f3}\t{1:f3}\t{2:f3}                ", l1, l2, ay);




                    SetPerspectiveProjection(game.Width, game.Height, 70);

                    GL.ClearColor(0.3f, 0.3f, 0.3f, 1f);
                    GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);

                    me.X = 5 * (float)Math.Cos(t);
                    me.Z = 5 + 5 * (float)Math.Sin(t);
                    //t += 0.005f;

                    SetLookAtCamera(me, at, up);

                    GL.Begin(PrimitiveType.Quads);
                    GL.Color4(1f, 1f, 1f, 1f);
                    GL.Vertex3(-1f, 0f, 4f);
                    GL.Vertex3(1f, 0f, 4f);
                    GL.Vertex3(1f, 0f, 6f);
                    GL.Vertex3(-1f, 0f, 6f);
                    GL.End();
                    GL.Disable(EnableCap.Texture2D);

                    GL.LineWidth(5);
                    GL.Begin(PrimitiveType.Lines);

                    GL.Color3(0f, 1f, 0f);
                    GL.Vertex3(0, 0, 5f);
                    GL.Vertex3(0, arm_len * 2, 5f);


                    GL.Color3(1f, 0f, 0f);
                    GL.Vertex3(l1 * 2 , 0, 5f );
                    GL.Color3(0f, 0f, 1f);
                    GL.Vertex3(l2 * 2 , ay * 2, 5f);

                    GL.Color3(1f, 0f, 1f);
                    GL.Vertex3(l2 * 2 , ay * 2, 5f);

                    GL.Vertex3(l2 * 2 , ay * 2 - Math.Cos(ang1), 5f + Math.Sin(ang1) );

                    /*
                    GL.Color3(1f, 0f, 0f);
                    GL.Vertex3(l1 * 2 * Math.Cos(ang), 0, 5f + Math.Sin(ang) * 2 * l1);
                    GL.Color3(0f, 0f, 1f);
                    GL.Vertex3(l2 * 2 * Math.Cos(ang), ay * 2, 5f + Math.Sin(ang) * 2 * l2);

                    GL.Color3(1f, 0f, 1f);
                    GL.Vertex3(l2 * 2 * Math.Cos(ang), ay * 2, 5f + Math.Sin(ang) * 2 * l2);

                    GL.Vertex3(l2 * 2 * Math.Cos(ang), ay * 2 - Math.Cos(ang), 5f + Math.Sin(ang) + Math.Sin(ang) * 2 * l2);*/
                    GL.End();


                    prevx = px;
                    prevy = pz;
                    game.SwapBuffers();
                };
                // Run the game at 60 updates per second
                Console.Clear();
                game.Run(60.0);
            }

            img.Save("test.png");
        }

        private static void SetLookAtCamera(Vector3 position, Vector3 target, Vector3 up)
        {
            Matrix4 modelViewMatrix = Matrix4.LookAt(position, target, up);
            GL.MatrixMode(MatrixMode.Modelview);
            GL.LoadMatrix(ref modelViewMatrix);
        }

        static int LoadTexture(Bitmap bitmap)
        {
            int tex;
            GL.Hint(HintTarget.PerspectiveCorrectionHint, HintMode.Nicest);

            GL.GenTextures(1, out tex);
            GL.BindTexture(TextureTarget.Texture2D, tex);

            BitmapData data = bitmap.LockBits(new System.Drawing.Rectangle(0, 0, bitmap.Width, bitmap.Height),
                ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);

            GL.TexImage2D(TextureTarget.Texture2D, 0, PixelInternalFormat.Rgba, data.Width, data.Height, 0,
                OpenTK.Graphics.OpenGL.PixelFormat.Bgra, PixelType.UnsignedByte, data.Scan0);
            bitmap.UnlockBits(data);


            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Linear);
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMagFilter, (int)TextureMagFilter.Linear);
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapS, (int)TextureWrapMode.Repeat);
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureWrapT, (int)TextureWrapMode.Repeat);
            return tex;
        }
        private static void SetPerspectiveProjection(int width, int height, float FOV)
        {
            Matrix4 projectionMatrix = Matrix4.CreatePerspectiveFieldOfView((float)Math.PI * (FOV / 180f), width / (float)height, 0.01f, 20f);
            GL.MatrixMode(MatrixMode.Projection);
            GL.LoadMatrix(ref projectionMatrix); // this replaces the old matrix, no need for GL.LoadIdentity()
            GL.ShadeModel(ShadingModel.Smooth);
            GL.Enable(EnableCap.DepthTest);            // Разрешить тест глубины
            GL.DepthFunc(DepthFunction.Lequal);
            GL.Hint(HintTarget.PerspectiveCorrectionHint, HintMode.Nicest);

        }

    }
}
